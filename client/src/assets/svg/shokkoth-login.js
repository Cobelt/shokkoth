import React from 'react';
import get from 'lodash.get';

export default ({ look = "half-closed", ...otherProps }) => {

  // console.log('received look=', look);
  const bg = { strokeWidth: 4, cx: 50, cy: 50, r: 48, fill: '#fafafa' };
  const fg = { strokeWidth: 4, className: 'external-border', cx: 50, cy: 50, r: 48, fill: 'none' };

  let decalage = 20
  if (look !== 'away')
    decalage = Math.min(parseInt(get(look.match(/#(\d+)$/i), '[1]') || decalage, 10), 40)
  const irisState = look.replace(`#${decalage}`, '');

  const tentacles = {
    fill: "#28736f",
    d: "m 18.902729,49.834574 c 4.563595,-2.757331 10.241801,-2.71491 14.742306,-0.339364 0.147204,0.06364 0.273395,0.148464 0.441639,0.254523 0,0 0,0 0,0 0.105154,0.04241 0.168239,0.08484 0.252364,0.148464 4.079897,2.375546 3.364863,-1.569559 -1.177701,-4.623832 -0.252366,-0.16969 -0.46267,-0.318153 -0.651943,-0.487835 -0.06309,-0.02121 -0.105154,-0.06364 -0.168239,-0.106052 -1.892736,-1.208982 -3.596198,-2.460387 -5.110386,-4.114785 -2.250253,-2.481597 -3.764441,-6.850905 -1.913766,-10.032441 1.198732,-2.099814 2.881165,-3.839052 4.121957,-5.917655 1.619342,-2.71491 1.913767,-8.844668 -3.049407,-7.275111 -0.252364,0.08485 -0.546789,-0.190896 -0.399578,-0.424205 1.913766,-2.927011 5.383781,-1.993762 7.528881,0.296944 3.722381,3.966313 0.757096,9.693077 -1.472128,13.426078 -2.944253,4.963195 2.124072,6.553962 5.657177,8.144731 7.087244,0.148464 33.291117,3.584529 30.557166,-7.868998 -2.060979,-3.839052 -4.73184,-9.714288 -0.841216,-13.489709 2.229221,-2.184654 5.741298,-2.948223 7.528881,0.06364 0.147224,0.254523 -0.168238,0.487836 -0.399577,0.424205 -4.879052,-1.80287 -4.879052,4.326888 -3.385894,7.126639 1.135641,2.121023 2.733953,3.945103 3.848563,6.108547 1.682431,3.266377 0,7.550844 -2.376435,9.92639 -1.598309,1.590766 -3.364863,2.736118 -5.299659,3.860262 -0.189274,0.106051 -0.378547,0.212102 -0.567822,0.339364 v 0 c -4.563596,3.054272 -5.257598,6.999377 -1.198732,4.623831 0.08412,-0.04241 0.168238,-0.106052 0.273396,-0.148464 v 0 c 0.168239,-0.106051 0.315454,-0.190896 0.441637,-0.254523 4.521536,-2.375546 10.178713,-2.417967 14.742308,0.339364 4.374323,2.651278 7.423728,8.20836 5.110387,13.362448 -2.418497,5.472239 -7.465791,6.278229 -11.987327,2.820959 -0.420608,-0.318154 -0.147203,-0.912039 0.357518,-0.8272 6.498392,1.421087 10.389015,-4.963193 4.479474,-9.035557 -3.911654,-2.693701 -8.664523,0.827197 -10.851685,4.029944 -0.504729,0.742358 -0.946368,1.527136 -1.366976,2.333125 0,0.02121 0,0.02121 0,0.02121 -0.189274,0.360574 -0.357516,0.742359 -0.525758,1.124143 -0.08412,0.212101 -0.189274,0.445413 -0.294428,0.678726 1.724494,0.275733 3.512077,0.99688 4.752871,2.269495 1.535219,1.590767 2.250252,3.436057 2.902195,5.51466 0.862245,2.6937 1.745521,5.641923 4.647717,6.447913 1.430067,0.402993 2.628799,0.530254 3.953714,-0.721149 1.324915,-1.251405 1.219763,-2.927012 0.4837,-4.517779 -0.231335,-0.530257 0.420606,-1.208985 0.841215,-0.678729 0.967399,1.166564 1.829644,2.354337 1.871706,3.966314 0.04207,1.739241 -0.862248,3.648161 -2.187162,4.772303 -3.238681,2.73612 -7.549913,2.333126 -10.788593,-0.212103 -1.366976,-1.102931 -2.460556,-2.566438 -3.259711,-4.135995 -0.50473,-0.933249 -0.820186,-1.951341 -1.303884,-2.905803 -0.441639,-0.827198 -1.051521,-1.527136 -1.61934,-2.269493 -0.294428,-0.402995 -0.651943,-0.551467 -1.051521,-0.615097 -0.336487,-0.08485 -1.303884,-0.254523 -1.829644,-0.106052 0,0 0,0 -21.030396,0 -6.182938,-0.148463 -7.171366,0.02121 -7.507852,0.106052 -0.399582,0.06362 -0.757098,0.212098 -1.072554,0.615093 -0.546791,0.742357 -1.177703,1.442295 -1.598311,2.269493 -0.483699,0.954461 -0.799153,1.972554 -1.282853,2.905803 -0.820186,1.569556 -1.913766,3.033064 -3.28074,4.114785 -3.238683,2.566439 -7.549914,2.948223 -10.809626,0.233313 -1.324914,-1.124142 -2.20819,-3.033063 -2.166129,-4.772303 0.02104,-1.611978 0.883276,-2.778539 1.850673,-3.966314 0.420608,-0.509046 1.093582,0.148464 0.841217,0.678728 -0.736065,1.590767 -0.841217,3.266375 0.483698,4.51778 1.303886,1.251403 2.523649,1.102932 3.953716,0.721149 2.923224,-0.80599 3.8065,-3.754213 4.647717,-6.447913 0.672973,-2.078603 1.388007,-3.945103 2.923226,-5.51466 1.219763,-1.272615 2.986315,-1.993762 4.689776,-2.269495 -0.105154,-0.233313 -0.210304,-0.445415 -0.315456,-0.678726 -0.168239,-0.381785 -0.336485,-0.763569 -0.504729,-1.124143 0,0 0,0 0,-0.02121 -0.420609,-0.805993 -0.862246,-1.590771 -1.366975,-2.333129 -2.18716,-3.202747 -6.940031,-6.723645 -10.851685,-4.029945 -5.909541,4.072365 -2.039948,10.456645 4.458445,9.056769 0.50473,-0.106052 0.757094,0.509046 0.357516,0.827199 -4.500505,3.436059 -9.547799,2.63007 -11.987324,-2.84217 -2.292314,-5.154087 0.736062,-10.711169 5.110386,-13.362447 z"
  }

  const spikes = { fill: '#0A7590', d: "M 50.000 80.000 L 58.652 86.630 L 61.756 76.180 L 72.652 76.458 L 69.021 66.180 L 78.000 60.000 L 69.021 53.820 L 72.652 43.542 L 61.756 43.820 L 58.652 33.370 L 50.000 40.000 L 41.348 33.370 L 38.244 43.820 L 27.348 43.542 L 30.979 53.820 L 22.000 60.000 L 30.979 66.180 L 27.348 76.458 L 38.244 76.180 L 41.348 86.630 L 50.000 80.000 z" }

  const hideSpikesBasis = { fill: '#fafafa', cx: 50, cy: 60, r: 23.5 };
  const hideSpikesExternal = { fill: '#fafafa', d: "M 50.000 82.000 L 59.271 88.532 L 62.931 77.798 L 74.271 77.634 L 70.923 66.798 L 80.000 60.000 L 70.923 53.202 L 74.271 42.366 L 62.931 42.202 L 59.271 31.468 L 50.000 38.000 L 40.729 31.468 L 37.069 42.202 L 25.729 42.366 L 29.077 53.202 L 20.000 60.000 L 29.077 66.798 L 25.729 77.634 L 37.069 77.798 L 40.729 88.532 L 50.000 82.000 z" };
  const hideSpikesDeco = { fill: 'none', stroke: '#fafafa', strokeWidth: 1, cx: 50, cy: 60, r: 26, style: { opacity: 0.35 } };
  const body = { fill: '#0A7590', cx: 50, cy: 60, r: 22 };
  const neck = { fill: '#80fb8d', d: "m 52 38 c 5 -35 -5 -35 -10 -24 c -1 15 10 -20 6 24" };

  const eyeBorder = { fill: '#fafafa', d: "m 40 14.2 c  -3.6 0  -7.2  7.68  4.2  4.8 c  9.6 2.88  9.6 -2.88  4.2 -4.8 c -3 -2.4   1.2 -9.6   -4.2 -12 c -5.4  2.4   -1.2  9.6   -4.2 12" };
  const eye = { fill: '#206d68', d: "m 40.5 14 c  -3 0  -6  6.4  3.5  4 c  8 2.4  8 -2.4  3.5 -4 c -2.5 -2   1 -8   -3.5 -10 c -4.5  2   -1  8   -3.5 10" }
  const eyelidBorder = { fill: '#fafafa', cx: 44, cy: 14.7, r: 5.625 }
  const eyelid = { fill: '#206d68', cx: 44, cy: 14.7, r: 4.5 }


  const iris = { fill: '#ECD55D', d: 'm 41 15 c 0.5 4 5.5 4 6 0 c -1 -2 -5 -2 -6 0', className: ["iris", irisState].filter(e => !!e).join(' ').trim() }

  const mouth = { fill: '#dcdbaa', d: "m 50 50 c 4 0 8 0 12 5 c 10 13 -3 11 -6 10 c -4 -1.5 -8 -1.5 -12 0 c -3 1 -16 3 -6 -10 c 4 -5 8 -5 12 -5" }
  const teeth = { fill: '#fafafa', style: { opacity: 0.8 }, d: "m 33 64 l 4 -7 l 4 3 l 4.5 -6 l 4.5 4 l 4.5 -4 l 4.5 6 l 4 -4 l 4 7 c 0.1 0.5 -0.5 1.5 -1 1 l -3 -6 l -4 4 l -4.5 -6 l -4.5 4 l -4.5 -4 l -4.5 6 l -4 -3 l -3 6 c 0 0.2 -0.2 0 -1 -1" }

  return (
  	<svg
  		viewBox="0 0 100 100"
  		style={{ enableBackground: "new 0 0 100 100" }}
  		xmlSpace="preserve"
  		{ ...otherProps }
  	>
      <defs>
        <filter id="dropshadow" height="130%">
          <feGaussianBlur in="SourceAlpha" stdDeviation="3"/> {/* stdDeviation is how much to blur */}
          <feOffset dx="2" dy="2" result="offsetblur"/> {/* how much to offset */}
          <feComponentTransfer>
            <feFuncA type="linear" slope="0.3"/> {/* slope is the opacity of the shadow */}
          </feComponentTransfer>
          <feMerge>
            <feMergeNode/> {/* this contains the offset blurred image */}
            <feMergeNode in="SourceGraphic"/> {/* this contains the element that the filter is applied to */}
          </feMerge>
        </filter>

        <filter id="insetshadow" x="-50%" y="-50%" width="200%" height="200%">
            <feComponentTransfer in="SourceAlpha">
              <feFuncA type="table" tableValues="1 0" slope="0.3" />
            </feComponentTransfer>
            <feGaussianBlur stdDeviation="3"/>
            <feOffset dx="2.5" dy="3.5" result="offsetblur"/>
            <feFlood floodColor="#333" result="color"/>
            <feComposite in2="offsetblur" operator="in"/>
            <feComposite in2="SourceAlpha" operator="in" />
            <feMerge>
              <feMergeNode in="SourceGraphic" />
              <feMergeNode />
            </feMerge>
        </filter>
      </defs>

      <circle {...bg} />

      <path {...tentacles} />


      <path {...neck} />

      {/* can rotate ! */}
      <g className="spikes-group">
        <path {...hideSpikesExternal} />
        <path {...spikes} />
        <circle {...hideSpikesBasis} />
      </g>

      <g className="body-and-mouth">
        <circle {...body} />
        <path {...mouth} />
        {/* <path {...teeth} /> */}
      </g>

      <g className="eye-group" style={{ transform: 'matrix(1.5023,0,0,1.4808765,-20.243813,0.93666372)' }}>
        {/* <path {...eyeBorder} /> */}
        {/* <circle {...eyelidBorder} /> */}
        <path {...eye} />
        <circle {...eyelid} />
        <path {...iris} />
      </g>

      <circle {...fg} />
  	</svg>
  );
}
